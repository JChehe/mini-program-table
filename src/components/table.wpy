<template>
    <view class="table-fixed">
        <!-- S 固定列 -->
        <view class="table__fixed-columns">
            <!-- S 横竖方向都要固定的左上角单元格 -->
            <view class="table__fixed-common tr">
                <view class="fixed-th th"
                    wx:for="{{fixedCols[0]}}"
                    wx:key="{{index}}"
                    style="width: {{colWidths[index]}}rpx;">
                    {{item}}
                </view>
            </view>
            <!-- E 横竖方向都要固定的左上角单元格 -->

            <!-- S 固定列（除表头） -->
            <scroll-view class="table__fixed-others"
                scroll-y
                scroll-top="{{scrollTop}}"
                style="height: {{tbodyHeight}}rpx;">
                <view wx:for="{{firstColsOther}}"
                    wx:for-item="row"
                    wx:for-index="rowIndex"
                    wx:key="{{rowIndex}}"
                    class="tr">
                    <view class="td"
                        wx:for="{{row}}"
                        wx:for-item="col"
                        wx:for-index="colIndex"
                        wx:key="{{colIndex}}"
                        style="width: {{colWidths[colIndex]}}rpx;">
                        {{col}}
                    </view>
                </view>
            </scroll-view>
            <!-- E 固定列（除表头） -->
        </view>
        <!-- E 固定列 -->

        <!-- S 完整的表格 -->
        <scroll-view class="table"
            scroll-x>
            <!-- S 固定表头（完整） -->
            <view class="thead"
                style="width: {{totalWidth}}rpx;">
                <view class="tr">
                    <view class="th"
                        wx:for="{{thead}}"
                        wx:key="{{index}}"
                        style="width: {{colWidths[index]}}rpx;">
                        {{item}}
                    </view>
                </view>
            </view>
            <!-- E 固定表头（完整） -->

            <!-- S tbody（完整） -->
            <scroll-view class="tbody"
                scroll-y
                throttle="{{false}}"
                @scroll="scrollVertical"
                style="width: {{totalWidth}}rpx; height: {{tbodyHeight}}rpx;">
                <view class="tr"
                    wx:for="{{tbody}}"
                    wx:for-item="tr"
                    wx:for-index="trIndex"
                    wx:key="{{trIndex}}">
                    <view class="td"
                        wx:for="{{tr}}"
                        wx:for-item="td"
                        wx:for-index="tdIndex"
                        wx:key="{{tdIndex}}"
                        style="width: {{colWidths[tdIndex]}}rpx;">
                        {{td}}
                    </view>
                </view>
            </scroll-view>
            <!-- S tbody（完整） -->
        </scroll-view>
        <!-- E 完整的表格 -->
    </view>
</template>

<script>
    import wepy from 'wepy'
    import utils from '@/utils/index'

    const getTextWidth = utils.getTextWidth

    export default class Table extends wepy.component {
        props = {
            table: {
                type: Array,
                required: true
            },
            fixedColsNum: {
                type: [Number, String],
                default: 1
            },
            tbodyHeight: {
                type: [Number, String],
                default: 504
            }
        }

        data = {
            colWidths: [],
            scrollTop: 0,
            totalWidth: 0,
            fixedCols: [],
            firstColsOther: [],
            thead: [],
            tbody: []
        }

        watch = {
            /**
             * $apply() 的触发都会导致 computed 属性内所有值都运行一次，
             * 即使 computed 属性所依赖的属性未变更。
             * 故通过 watch 判断依赖属性是否发生更改，避免不必的繁重运算。
             */
            table () {
                this.init()
                this.$apply()
            }
        }

        methods = {
            scrollVertical (event) {
                const scrollTop = event.detail.scrollTop
                this.scrollTop = scrollTop
            }
        }

        init () {
            this.colWidths = this.getColWidths()
            this.totalWidth = this.getTotalWidth()
            this.fixedCols = this.getFixedCols()
            this.firstColsOther = this.getFirstColsOther()
            this.thead = this.getThead()
            this.tbody = this.getTbody()
        }

        getTbody () {
            return this.table.slice(1)
        }

        getThead () {
            return this.table[0]
        }

        getFirstColsOther () {
            return this.fixedCols.slice(1)
        }

        getFixedCols (table) {
            const result = []
            this.table.forEach(row => {
                result.push(row
                    .slice(0, this.fixedColsNum)
                    .map(col => col))
            })
            return result
        }

        getTotalWidth () {
            return this.colWidths.reduce((acc, cur) => {
                return acc + cur
            })
        }

        /**
         * 计算每列的宽度，依据单元格的字符串像素宽度
         */
        getColWidths () {
            const table = this.table
            const result = []
            const TH_FONT_SIZE = 24
            const TD_FONT_SIZE = 28
            const SCALE_RATIO = 1.5
            for (let colIndex = 0, colLen = table[0].length; colIndex < colLen; colIndex++) {
                let maxWidth = getTextWidth(table[0][colIndex], TH_FONT_SIZE)
                for (let rowIndex = 1, rowLen = table.length; rowIndex < rowLen; rowIndex++) {
                    const cell = table[rowIndex][colIndex]
                    const cellWidth = getTextWidth(cell, TD_FONT_SIZE)
                    if (cellWidth > maxWidth) {
                        maxWidth = cellWidth
                    }
                }
                result.push(Math.ceil(maxWidth * SCALE_RATIO))
            }
            return result
        }
    }
</script>

<style lang="scss" scoped>
    .table-fixed {
        position: relative;
        overflow: hidden;
    }

    .table__fixed-columns {
        position: absolute;
        left: 0;
        background-color: #fff;
        z-index: 100;
        pointer-events: none; // 固定列不接受触摸，相当于滚动表格本身
    }

    .table {
        width: 100%;
    }

    .tr {
        white-space: nowrap;
        overflow: hidden;
        font-size: 0;

        &:nth-child(even) {
            background-color: #FAFAFA;
        }
    }

    $borderColor: #E6E6E6;

    .td,
    .th {
        box-sizing: border-box;
        display: inline-block;
        text-align: center;
        color: #666;
        border-right: 1px solid $borderColor;
        border-bottom: 1px solid $borderColor;

        &:first-child {
            border-left: 1px solid $borderColor;
        }
    }

    .th {
        font-size: 24rpx;
        line-height: 34rpx;
        padding: 6rpx 0;
        border-top: 1px solid $borderColor;
    }

    .td {
        font-size: 28rpx;
        line-height: 38rpx;
        padding: 16rpx 0;
    }

</style>
